func add(a,b){
    return a+b
}

func add3(b){
    return func(){
        return add(3,b)
    }
}
func twice(){
    return func(){
        return 5+5
    }
}

func trible(p){
    original = p

    a =  func(){
       return original
    }
    b = func(){
        return a()+p
    }
    c= func(){
        return b()+p
    }
    return c
}
t = trible(3)
assert(t()==9)
assert(add(1,2)==3)
a = add3(4)
assert(typeof(a)=="callable")
assert(a()==7)
q=twice()
assert(q()==10)
assert(q()==10)
println(q)


func currying(f){
    return func(a){
        return f(1,a)
    }
}

currying_demo = currying(func(a,b){return a+b})
assert(currying_demo(2)==3)


func nest_closures(){
    top = 100
    a = func(){
        b = 10
        c = b+20
        d = func(){
            e = top+c
            f = func(){
                h = 100
                g = e+h
                return g
            }
            return f()
        }
        return d()
    }
    return a()
}

assert(nest_closures()==230)